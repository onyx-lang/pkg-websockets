//+optional-semicolons

package websockets

use core.hash.sha1
use core.encoding.base64
use core.net
use core.alloc
use core {tprintf}

#if #defined(package http.server) {
    use http.server {Pipeable, Pipe, Request, Response}

    Server :: struct {
        handler: (&Conn) -> void
        allocator: Allocator
    }

    server :: (handler: (&Conn) -> void, allocator := context.allocator) -> (s: Server) {
        s.handler = handler
        s.allocator = allocator
        return
    }


    #local
    connection_handler :: (s: &Server, req: &Request, res: &Response) {
        if req.headers["connection"] ?? "" != "Upgrade" {
            res->status(400)
            return
        }

        key := req.headers["sec-websocket-key"] ?? [] {
            res->status(400)
            return return
        }

        version := req.headers["sec-websocket-version"] ?? [] {
            res->status(400)
            return return
        }

        protocols  := req.headers["sec-websocket-protocol"] ?? ""
        extensions := req.headers["sec-websocket-extensions"] ?? ""

        res.headers["Upgrade"] = "websocket"
        res.headers["Connection"] = "Upgrade"
        res.headers["Sec-Websocket-Accept"] = compute_accept_key(key)
        // res.headers["Sec-Websocket-Extensions"] = "" // todo: add extensions
        // res.headers["Sec-Websocket-Protocol"] = ""   // todo: add other protocols

        res->status(101)
        res->end()

        socket := s.allocator->move(req.client->detach())
        conn   := s.allocator->move(Conn.make_from_stream(socket, .Server))
        conn.stream_allocator = s.allocator

        s.handler(conn)
    }

    #overload
    Pipeable.as_pipe :: (s: &Server) -> Pipe {
        return .{
            connection_handler,
            s
        }
    }
}

#package
compute_accept_key :: (s: str) -> str {
    hasher := sha1.Hasher.make()
    hasher->update(s)
    hasher->update("258EAFA5-E914-47DA-95CA-C5AB0DC85B11")
    sha1hash := hasher->final()
    return base64.encode(sha1hash)
}

