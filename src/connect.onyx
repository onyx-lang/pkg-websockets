//+optional-semicolons

package websockets

use core {Result, tprintf}
use core.string
use core.encoding.base64
use core.random
use core.conv
use core.net
use core.io

ConnectResult :: Result(&Conn, ConnError)

connect :: (uri: str, protocol: str, origin: str) -> ConnectResult {
    url := destructure_url(uri)->or_return(ConnectResult.{ Err = ConnError.BadParameter })

    use dns_results := net.resolve(url.host, ~~url.port, 5);
    dns_result := Slice.find_opt(dns_results, [x](x.type == .Stream)) ?? [] {
        return return .{ Err = .ConnectionFailed }
    }

    socket := net.socket_create(dns_result.family, dns_result.type, dns_result.proto)->transform_err(_ => ConnError.InternalError)?

    if err := socket->connect(&dns_result.addr); err != .None {
        return .{ Err = .ConnectionFailed }
    }

    stream: & io.Stream

    if url.protocol == .Wss {
        if !try_ssl_connect(&stream, socket, url.host) {
            return .{ Err = .ConnectionFailed }
        }
    } else {
        stream = context.allocator->move(socket)
    }

    accept_key: str
    if !try_socket_upgrade(stream, url, protocol, origin, &accept_key) {
        return .{ Err = .ConnectionFailed }
    }

    if !read_and_check_acknowledgement(stream, accept_key) {
        return .{ Err = .ConnectionFailed }
    }

    conn := context.allocator->move(
        Conn.make_from_stream(
            stream,
            .Client
        )
    )
    conn.stream_allocator = context.allocator

    return .{ Ok = conn }
}

#local
try_socket_upgrade :: (s: &io.Stream, url: Url, protocol: str, origin: str, key: &str) -> bool {
    use msg := make(dyn_str)
    conv.format(&msg, "GET {}", url.resource)

    if url.rawQuery {
        conv.format(&msg, "?{}", url.rawQuery)
    }

    conv.format(&msg, " HTTP/1.1\r\n")
    conv.format(&msg, "Host: {}\r\n", url.host)
    conv.format(&msg, "Upgrade: websocket\r\n")
    conv.format(&msg, "Connection: Upgrade\r\n")

    *key = random.string(16) |> base64.encode()
    conv.format(&msg, "Sec-WebSocket-Key: {}\r\n", *key)
    conv.format(&msg, "Sec-WebSocket-Version: 13\r\n")

    if protocol do conv.format(&msg, "Sec-WebSocket-Protocl: {}\r\n", protocol)
    if origin   do conv.format(&msg, "Origin: {}\r\n", origin)
    
    conv.format(&msg, "\r\n")

    err, sent := io.stream_write(s, msg)
    return err == .None && sent == msg.count
}

#local
read_and_check_acknowledgement :: (s: &io.Stream, key: str) -> bool {
    use r := io.Reader.make(s)

    use response_line := r->read_line(consume_newline=true)
    if response_line != "HTTP/1.1 101 Switching Protocols\r\n" do return false

    found_upgrade := false
    found_connection := false
    found_accept := false

    while true {
        use line := r->read_line(consume_newline=true)
        if line == "\r\n" do break

        header, value := string.bisect(line, ": ")
        string.to_lowercase(header)
        value = string.strip_whitespace(value)

        switch header {
            case "upgrade" do if value == "websocket" {
                found_upgrade = true
            }

            case "connection" do if string.to_lowercase(value) == "upgrade" {
                found_connection = true
            }

            case "sec-websocket-accept" do if value == compute_accept_key(key) {
                found_accept = true
            }
        }
    }

    return found_accept && found_upgrade && found_connection
}


#local
Url :: struct {
    protocol: Protocol;
    host: str;
    port: u32;
    resource: str;
    rawQuery: str;
}

#local
Protocol :: enum {
    Unknown;
    Ws;
    Wss;
}

#local
destructure_url :: (url: str) -> ?Url {
    protocol := Protocol.Unknown;
    host := "";
    port := 80;
    resource := "/";

    u := url;
    u~, query := string.bisect(u, '?');

    if string.contains(u, "://") {
        switch v := string.read_until(&u, ':'); v {
            case "ws" {
                protocol = .Ws;
            }
            
            case "wss" {
                protocol = .Wss;
                port = 443;
            }
        }

        string.advance(&u, 3);
    }

    host_and_port := string.read_until(&u, '/');
    if string.contains(host_and_port, '@') {
        // Currently, basic authentication in URL is not allowed.
        return .{};
    }

    host~, port_str := string.bisect(host_and_port, ':');
    if port_str {
        port = ~~ conv.parse_int(port_str);
    }

    if u do resource = u;

    return Url.{ protocol, host, port, resource, query };
}

#if #defined(package openssl) {
    use openssl {*}

    #local
    try_ssl_connect :: (stream: & &io.Stream, sock: net.Socket, host: str) -> bool {
        ssl_ctx := SSL_CTX_new(TLS_client_method())
        if cast(u64, ssl_ctx) == 0 {
            return false
        }
        
        SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, null);
        SSL_CTX_set_verify_depth(ssl_ctx, 4);
        SSL_CTX_set_options(ssl_ctx, SSL_OP_NO_COMPRESSION | SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION);
        SSL_CTX_set_default_verify_paths(ssl_ctx);

        ssl := try(SSL_new(ssl_ctx))
        bio := try(BIO_new_socket(~~sock.handle, BIO_NOCLOSE))
        SSL_set_bio(ssl, bio, bio)

        try(SSL_ctrl(
            ssl,
            SSL_CTRL_SET_TLSEXT_HOSTNAME,
            ~~ TLSEXT_NAMETYPE_host_name,
            tprintf("{}\0", host).data
        ))

        res := SSL_connect(ssl)
        if res <= 0 do return false

        *stream = context.allocator->move(SSL_Context.{
            base = .{
                &SSL_Context._vtable,
                .Block_On_Read
            },
            ctx = ssl_ctx,
            ssl = ssl,
        })

        return true

        try :: macro (v: $T) -> T {
            res := v
            if cast(u64, res) == 0 do return return false
            return res
        }
    }

    #local
    SSL_Context :: struct {
        use base: io.Stream

        ctx: SSL_CTX
        ssl: SSL
    }

    SSL_Context._vtable := io.Stream_Vtable.{
        read = (s: &SSL_Context, buffer: [] u8) -> (io.Error, u32) {
            bytes_read := SSL_read(s.ssl, buffer.data, buffer.count)
            if bytes_read <= 0 do return .EOF, 0

            return .None, bytes_read
        },

        write = (s: &SSL_Context, buffer: [] u8) -> (io.Error, u32) {
            bytes_wrote := SSL_write(s.ssl, buffer.data, buffer.count)
            if bytes_wrote <= 0 do return .EOF, 0

            return .None, bytes_wrote
        },

        poll = (s: &SSL_Context, state: io.PollEvent, timeout: i32) -> (io.Error, bool) {
            if state != .Read do return .None, true

            if timeout > 0 {
                logf(.Warning, "`timeout` parameter is currently not respected when using an SSL connection.")
            }

            return .None, SSL_pending(s.ssl) > 0
        },

        close = (s: &SSL_Context) -> io.Error {
            SSL_free(s.ssl)
            SSL_CTX_free(s.ctx)

            return .None
        }
    };

} else {
    #local
    try_ssl_connect :: (_1, _2, _3) => false
}
