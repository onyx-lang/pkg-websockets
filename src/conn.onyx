//+optional-semicolons

package websockets

use core.io
use core {Result}
use core.sync
use core.slice
use core.array
use core.random
use core.os

Conn :: struct {
    stream: &io.Stream

    open: bool

    type: ConnType
    format: ConnFormat
    mutex: sync.Mutex
    rand: random.Random

    last_checkin: u64
}

ConnType :: enum {
    Server :: 1
    Client :: 2
}

ConnFormat :: enum {
    Binary :: 1
    Text   :: 2
}

ConnError :: enum {
    None
    BadProtocol
    ConnectionClosed
    NotImplemented
}

Conn.make_from_stream :: (stream: &io.Stream, type: ConnType) -> (conn: Conn) {
    conn.stream = stream
    conn.open = true
    conn.type = type
    conn.rand = random.Random.make(os.time())
    sync.mutex_init(&conn.mutex)
    return
}

Conn.close :: (conn: &Conn) -> ConnError {
    io.stream_close(conn.stream)
    conn.open = false
    return .None
}

Conn.send :: (conn: &Conn, data: [] u8) -> ConnError {
    if !conn.open do return .ConnectionClosed

    header: FrameHeader
    header.fin = true
    header.payload_length = ~~data.count
    header.opcode = .Binary if conn.format == .Binary else .Text

    to_send := slice.copy(data, context.temp_allocator)
    if conn.type == .Client {
        key: [4] u8
        for &k in key do *k = ~~conn.rand->between(0, 256)
        header.masking_key = key
        apply_mask(to_send, key)
    }

    if !send_frame_header(conn.stream, header) do return .ConnectionClosed

    if err, wrote := io.stream_write(conn.stream, to_send);
        err != .None || wrote != to_send.count
    {
        return .ConnectionClosed
    }

    return .None
}

Conn.recv :: (conn: &Conn, allocator := context.allocator) -> Result([] u8, ConnError) {
    if !conn.open do return .{ Err = .ConnectionClosed }

    consumer := FrameConsumer.{
        conn,
        make([..] u8, allocator)
    }

    consumer->consume_all_frames()
    // TODO: Handle ping
    // TODO: Handle pong

    if consumer.should_close {
        conn->close()
        return .{ Err = .ConnectionClosed }
    }

    return .{ Ok = consumer.buf }
}

#local
FrameConsumer :: struct {
    conn: &Conn

    buf: [..] u8

    ping_encountered := false
    pong_encountered := false

    should_close := false
}

FrameConsumer.consume_all_frames :: (self: &#Self) {
    while true {
        maybe_header := read_frame_header(self.conn.stream)
        if !maybe_header {
            self.should_close = true
            return
        }

        header := maybe_header?

        if header.opcode == .Ping do self.ping_encountered = true
        if header.opcode == .Pong do self.pong_encountered = true

        if header.opcode == .Text ||
           header.opcode == .Binary ||
           header.opcode == .Continuation
        {
            use new_data := make([] u8, ~~header.payload_length)

            err, _ := io.stream_read_until_full(self.conn.stream, new_data)
            if err != .None do return

            header.masking_key->with([key] {
                // Connections living on the server (from the client)
                // should not have a masking key, and if they do,
                // the connection must be closed.
                if self.conn.type != .Server {
                    self.should_close = true
                }

                apply_mask(new_data, key)
            })

            array.concat(&self.buf, new_data)

            if header.fin do break
        }

        if header.opcode == .Close {
            // TODO: Handle the socket close case
            self.should_close = true
        }
    }
}

#local
FrameHeader :: struct {
    fin: bool
    opcode: FrameOpcode
    payload_length: u64
    masking_key: ? [4] u8
}

#local
FrameOpcode :: enum {
    Continuation :: 0
    Text         :: 1
    Binary       :: 2
    Close        :: 8
    Ping         :: 9
    Pong         :: 10
}

#local
read_frame_header :: (s: &io.Stream) -> ? FrameHeader {
    header: FrameHeader

    data: [8] u8
    err, data_len := io.stream_read_until_full(s, data[0 .. 2])
    if err != .None || data_len == 0 do return .None

    header.fin    =   (data[0] & 0x80) != 0
    header.opcode = ~~(data[0] & 0x0F)

    has_mask             :=   (data[1] & 0x80) != 0
    header.payload_length = ~~(data[1] & 0x7F)

    if header.payload_length == 126 {
        err, data_len := io.stream_read_until_full(s, data[0 .. 2])
        if err != .None || data_len == 0 do return .None

        slice.reverse(data[0 .. 2])

        header.payload_length = ~~ *cast(&u16) data
    }
    elseif header.payload_length == 127 {
        err, data_len := io.stream_read_until_full(s, data)
        if err != .None || data_len == 0 do return .None

        slice.reverse(data)

        header.payload_length = ~~ *cast(&u64) data
    }

    if has_mask {
        err, data_len := io.stream_read_until_full(s, data[0 .. 4])
        if err != .None || data_len == 0 do return .None

        header.masking_key = *cast(&[4] u8) data
    }

    return header
}

#local
send_frame_header :: (s: &io.Stream, header: FrameHeader) -> bool {
    data: [14] u8
    data_len := 2

    data[0] = cast(u8) header.opcode

    if header.fin         do data[0] |= 0x80
    if header.masking_key do data[1] |= 0x80

    if header.payload_length < 126 {
        data[1] |= ~~header.payload_length
    }
    elseif header.payload_length <= 65535 {
        data[1] |= 126
        data[2] = ~~((header.payload_length & 0xff00) >> 8)
        data[3] = ~~((header.payload_length & 0x00ff) >> 0)
        data_len += 2
    }
    else {
        data[1] |= 127
        data[2] = ~~((header.payload_length & 0xff00000000000000) >> 56)
        data[3] = ~~((header.payload_length & 0x00ff000000000000) >> 48)
        data[4] = ~~((header.payload_length & 0x0000ff0000000000) >> 40)
        data[5] = ~~((header.payload_length & 0x000000ff00000000) >> 32)
        data[6] = ~~((header.payload_length & 0x00000000ff000000) >> 24)
        data[7] = ~~((header.payload_length & 0x0000000000ff0000) >> 16)
        data[8] = ~~((header.payload_length & 0x000000000000ff00) >> 8)
        data[9] = ~~((header.payload_length & 0x00000000000000ff) >> 0)
        data_len += 8
    }

    header.masking_key->with([key] {
        data[data_len + 0] = key[0]
        data[data_len + 1] = key[1]
        data[data_len + 2] = key[2]
        data[data_len + 3] = key[3]
        data_len += 4
    })

    err, wrote := io.stream_write(s, data[0 .. data_len])
    if err != .None || wrote != data_len do return false
    
    return true
}


#local
apply_mask :: (data: [] u8, key: [4] u8) {
    for &d, index in data {
        *d = *d ^ key[index % 4]
    }
}

