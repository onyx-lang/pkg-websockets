//+optional-semicolons

#load "./../module"
#load "./lib/packages.onyx"

use websockets { ws :: package } use http.server { http :: package }
use core.net
use core.thread
use core.os

conn_manager :: (conn: &ws.Conn) {
    os.sleep(100)
    logf(.Info, "CON: {*p}", conn)
    logf(.Info, "COS: {*p}", conn.stream)
    logf(.Info, "CSV: {*p}", conn.stream.vtable)
    logf(.Info, "MSG: {}", conn->recv())
}

handler :: (conn: &ws.Conn) {
    t: thread.Thread
    thread.spawn(&t, conn, conn_manager)
}

main :: () {
    ws_server := ws.server(handler)

    router := http.router()
    router->route(.GET, "/chat", &ws_server)
    router->get("/", (req, res) => {
        res->html(#file_contents "./index.html")
        res->status(200)
        res->end()
    })

    logger := http.logger(style=.V2)

    app := http.pipeline()
    app->pipe(&router)
    app->pipe(&logger)

    tcp := http.tcp(&app)
    tcp->serve(8080)
}

